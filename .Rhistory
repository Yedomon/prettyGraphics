d
NULL %in% colnames(d)
library(plot.pretty)
?plot_residuals
set.seed(1)
x <- 1:1000
y <- rnorm(length(x), x*0.5, 30)
dat <- data.frame(x = x, y = y)
dat$fct <- sample(1:2, size = nrow(dat), replace = TRUE)
dat$z <- rnorm(nrow(dat), dat$x*0.01, 50)
m1 <- lm(y ~ x, data = dat)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
plot_residuals(residuals = stats::resid(m1), plot = 7)
dat
rm(list = ls())
library(plot.pretty)
plot_residuals(residuals = stats::resid(m1), plot = 7)
set.seed(1)
x <- 1:1000
y <- rnorm(length(x), x*0.5, 30)
dat <- data.frame(x = x, y = y)
dat$fct <- sample(1:2, size = nrow(dat), replace = TRUE)
dat$z <- rnorm(nrow(dat), dat$x*0.01, 50)
m1 <- lm(y ~ x, data = dat)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
set.seed(1)
x <- 1:1000
y <- rnorm(length(x), x*0.5, 30)
dat <- data.frame(x = x, y = y)
dat$fct <- sample(1:2, size = nrow(dat), replace = TRUE)
dat$z <- rnorm(nrow(dat), dat$x*0.01, 50)
m1 <- lm(y ~ x, data = dat)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
library(plot.pretty)
set.seed(1)
x <- 1:1000
y <- rnorm(length(x), x*0.5, 30)
dat <- data.frame(x = x, y = y)
dat$fct <- sample(1:2, size = nrow(dat), replace = TRUE)
dat$z <- rnorm(nrow(dat), dat$x*0.01, 50)
m1 <- lm(y ~ x, data = dat)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
plot_residuals(residuals = stats::resid(m1), plot = 7)
library(plot.pretty)
set.seed(1)
x <- 1:1000
y <- rnorm(length(x), x*0.5, 30)
dat <- data.frame(x = x, y = y)
dat$fct <- sample(1:2, size = nrow(dat), replace = TRUE)
dat$z <- rnorm(nrow(dat), dat$x*0.01, 50)
m1 <- lm(y ~ x, data = dat)
pp <- graphics::par(mfrow = c(3, 3))
plot_residuals(residuals = stats::resid(m1),
fv = fitted(m1),
lp = fitted(m1),
vars = c("z", "fct"),
timestamp = "x",
dat = dat,
)
graphics::par(pp)
plot_residuals(residuals = stats::resid(m1), plot = 7)
library(plot.pretty)
library(plot.pretty)
devtools::build_manual()
?plot_residuals
library(plot.pretty)
vignettepackage = "plot.pretty"
vignette(package = "plot.pretty")
usethis
usethis::use_news_md()
usethis::use_readme_rmd()
library(TeachingDemos)
n = 5
paste0(rep(0, n), collapse = "")
x <-seq(0, 1, by = 0.2) * 10^5
graphics::plot(at, at, axes = FALSE)
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 2)[, 2]
dp
x/1e5
x
x <- seq(0, 1, by = 0.2)
x
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 2)[, 2]
dp
dp <- stringr::str_split_fixed(x, ".", 2)
dp
dp <- stringr::str_split_fixed(x, ".", 3)
dp
?stringr::str_spli_fixed
?stringr::str_split_fixed
nchar("")
dp <- stringr::str_split_fixed(x, ".", 3)[, 3]
dp
nchar(dp) - n
diff <- n - nchar(dp)
diff
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 3)[, 3]
# pos <- which(sapply(dp, function(i){ i == "" }))
diff <- n - nchar(dp)
x <- paste0(x, ".", paste0(rep(0, diff), collapse = ""))
diff
paste0(x, ".", paste0(rep(0, diff), collapse = ""))
paste0(rep(0, diff)
)
dp
x
diff
length(x)
length(diff)
dat <- data.frame(x = x)
dat$diff - n - nchar(dp)
x <- paste0(dat$x, ".", paste0(rep(0, dat$diff), collapse = ""))
x <- paste0(dat$x, ".", paste0(rep(0, dat$diff), collapse = ""))
dat$x
dat$diff
dat$diff <- n - nchar(dp)
x <- paste0(dat$x, ".", paste0(rep(0, dat$diff), collapse = ""))
dat$diff
x
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 3)[, 3]
dp
diff <- n - nchar(dp)
?paste0
?Vectorize
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 3)[, 3]
diff <- n - nchar(dp)
pwd <- function(x, diff){ paste0(x, ".", paste0(rep(0, diff), collapse = "")) }
pwd <- Vectorize(pwd)
x <- pwd(x, diff)
x
diff
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 3)[, 3]
diff <- n - nchar(dp)
pwd <- function(x, diff, n){
if(diff == n){
paste0(x, ".", paste0(rep(0, diff), collapse = ""))
} else {
paste0(x, paste0(rep(0, diff), collapse = ""))
}
pwd <- Vectorize(pwd, vectorize.arg = c("x", "diff"))
x <- pwd(x, diff)
}}}
x <- seq(0, 1, by = 0.2)
z = x
x <- as.character(x)
dp <- stringr::str_split_fixed(x, ".", 3)[, 3]
diff <- n - nchar(dp)
pwd <- function(x, diff, n){
if(diff == n){
paste0(x, ".", paste0(rep(0, diff), collapse = ""))
} else {
paste0(x, paste0(rep(0, diff), collapse = ""))
}
}
pwd <- Vectorize(pwd, vectorize.arg = c("x", "diff"))
x <- pwd(x, diff)
x <- pwd(x, diff, n)
x
source('~/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/Utils/plot.pretty/plot.pretty/R/add_lagging_point_zero.R')
at <- seq(0, 1, by = 0.2) * 10^5
as.character(labels1) # the .0 disappears from 0 and 1 when coerced to a character (see graph)
labels1 <- at/10^5; labels1
as.character(labels1) # the .0 disappears from 0 and 1 when coerced to a character (see graph)
labels2 <- add_lagging_point_zero(labels1, n = 1); labels2
as.character(labels2)
axis(side = 1, at, labels = labels1)
graphics::plot(at, at, axes = FALSE)
axis(side = 1, at, labels = labels1)
axis(side = 2, at, labels = labels2)
plyr::round_any()
?plyr::roud
plyr::round_any
?plyr::round_any
add_lagging_point_zero(c(0.01, 0.002), n = 4)
add_lagging_point_zero(c(0.01, 0.002), n = 4)
source('~/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/Utils/plot.pretty/plot.pretty/R/add_lagging_point_zero.R')
add_lagging_point_zero(c(0.01, 0.002), n = 4)
round_any(135, 10)
library(plyr])
library(plyr)
round_any(135, 10)
round_any(135, 0.001)
add_lagging_point_zero(c(0.01, 0.002), n = 4)
source('~/Documents/PhD/Academic_PhD_Work/Data and Modelling/Scripts/Utils/plot.pretty/plot.pretty/R/add_lagging_point_zero.R')
x <- 1:10
y <- rnorm(length(x), x*5-10, 5)
?pretty_axis
set.seed(1)
x <- 1:10
y <- rnorm(length(x), x*5-10, 5)
axis_args <-
pretty_axis(side = 1:2,
x = list(x, y),
pretty = list(n = 5),
add = FALSE,
return_list = TRUE
)
library(plot.pretty)
axis_args <-
pretty_axis(side = 1:2,
x = list(x, y),
pretty = list(n = 5),
add = FALSE,
return_list = TRUE
)
View(axis_args)
?difftime
?pretty_axis
#### Generate some data for numeric examples
set.seed(1)
x <- 1:10
y <- rnorm(length(x), x*5-10, 5)
# ... in which all the arguments for each side need to be grouped into a list.
axis_args <-
pretty_axis(side = 1:2,
x = list(x, y),
lim = list(x = c(-2, 12), y = c(-10, 41)),
units = list(5, 3),
add = FALSE,
return_list = TRUE
)
plot(x, y, axes = FALSE, xlim = axis_args$`1`$lim, ylim = axis_args$`2`$lim)
pretty_axis(axis_ls = axis_args, add = TRUE)
#### Generate timestamp data
# Generate some x and y values, where x values are timestamps
# ... in POSIXct format. Note the incorporation of tz.
x <- seq.POSIXt(as.POSIXct("2016-01-01", tz = "UTC"),
as.POSIXct("2016-01-02", tz = "UTC"), by = "2 mins")
y <- rnorm(length(x), as.numeric(x)*1e-6 + 100, 50)
axis_args <-
pretty_axis(side = 1:4,
x = list(x, y),
lim = list(NULL),
pretty = list(n = 5),
axis = list(list(),
list(las = TRUE),
list(labels = FALSE),
list(labels = FALSE)),
axis_ls = NULL,
add = FALSE,
return_list = TRUE
)
plot(x, y,
type = "l",
axes = FALSE,
xlim = axis_args$`1`$lim, ylim = axis_args$`2`$lim
)
#### Example 8: Graphical properties of each axis can be controlled separately
# We can change individual axes by creating a list of arguments for each axis
# changes to individual axes need to be specified via individual lists;
# e.g. to make the first axis red and the second blue, and to have 10 pretty labels
# ... on the first axis and 5 on the second we need to:
axis_args <-
pretty_axis(side = 1:2,
x = list(x, y),
lim = list(x = c(-2, 12), y = c(-10, 41)),
pretty = list(list(n = 10), n = 5),
units = list(NULL),
axis = list(list(col = "blue", cex.axis = 1.5), list(col = "red", cex.axis = 1.5)),
axis_ls = NULL,
add = FALSE,
return_list = TRUE
)
plot(x, y, axes = FALSE, xlim = axis_args$`1`$lim, ylim = axis_args$`2`$lim)
pretty_axis(axis_ls = axis_args, add = TRUE)
#### Generate some data for numeric examples
set.seed(1)
x <- 1:10
y <- rnorm(length(x), x*5-10, 5)
# ... on the first axis and 5 on the second we need to:
axis_args <-
pretty_axis(side = 1:2,
x = list(x, y),
lim = list(x = c(-2, 12), y = c(-10, 41)),
pretty = list(list(n = 10), n = 5),
units = list(NULL),
axis = list(list(col = "blue", cex.axis = 1.5), list(col = "red", cex.axis = 1.5)),
axis_ls = NULL,
add = FALSE,
return_list = TRUE
)
plot(x, y, axes = FALSE, xlim = axis_args$`1`$lim, ylim = axis_args$`2`$lim)
pretty_axis(axis_ls = axis_args, add = TRUE)
axis_args <-
pretty_axis(side = 1:2,
x = list(x, y),
lim = list(x = c(-2, 12), y = c(-10, 41)),
pretty = list(list(n = 10), list(n = 5)),
units = list(NULL),
axis = list(list(col = "blue", cex.axis = 1.5), list(col = "red", cex.axis = 1.5)),
axis_ls = NULL,
add = FALSE,
return_list = TRUE
)
plot(x, y, axes = FALSE, xlim = axis_args$`1`$lim, ylim = axis_args$`2`$lim)
pretty_axis(axis_ls = axis_args, add = TRUE)
?/clip
??clip
?qqnorm
qq <- qqplot(stats::runif(10, 0, 1), stats::rnorm(10, 0, 1))
qq <- qqplot(stats::rnorm(10, 0, 1), stats::rnorm(10, 0, 1))
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1))
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
qq
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
qq
pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y")
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
pp <- par()
?clip
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
qqline(qq$x, qq$y)
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$x, qq$y)
do.call("clip", as.list(usr))
?qqline
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(1000, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(1000, 0, 1), stats::rnorm(1000, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
# Define x and y values for qqnorm plot
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
# Define x and y values for qqnorm plot
set.seed(1)
qq <- qqplot(stats::rnorm(100, 0, 1), stats::rnorm(100, 0, 1), plot.it = FALSE)
# Define plot, saving list of axis parameters in axis_ls
# Supply x and y (qq$x and qq$y) respectively to create pretty axis limits;
# ... but use qqnorm to create plot which only required y (dd$y) (see ?stats::qqnorm)
axis_ls <- pretty_plot(qq$x, qq$y, f = stats::qqnorm, plot_xy = "y", return_list = TRUE)
# Set clipping region with axis limits
usr <- par("usr")
clip(axis_ls[[1]]$lim[1], axis_ls[[1]]$lim[2], axis_ls[[2]]$lim[1], axis_ls[[2]]$lim[2])
# Add qqline within limits
qqline(qq$y)
do.call("clip", as.list(usr))
library(plot.pretty)
?sci_notation
devtools::build_manual()
?plot.pretty
?pretty_plot
?hist
# generate numbers
x <- stats::runif(10, 0, 10)
# do.call implementation
pretty_args <- list(x = x, n = 5)
names(pretty_args); utils::str(pretty_args)
p1 <- do.call(pretty, pretty_args)
# standard implementation
p2 <- pretty(x, n = 5)
# do.call() and standard implementation are idential:
p1; p2; identical(p1, p2)
library(plot.pretty)
devtools::build_manual()
devtools::spell_check()
?dnorm
library(plot.pretty)
devtools::build_manual()
devtools::build_vignettes()
library(utils.add)
utils.add
?utils.add
?serial_difference
?difference
library(plot.pretty)
library(plot.pretty)
devtools::build_manual()
devtools::build_vignettes()
devtools::build_vignettes()
